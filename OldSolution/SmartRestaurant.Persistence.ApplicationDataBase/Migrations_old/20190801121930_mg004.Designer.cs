// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartRestaurant.Persistence.ApplicationDataBase;

namespace SmartRestaurant.Persistence.ApplicationDataBase.Migrations
{
    [DbContext(typeof(SmartRestaurantDbContext))]
    [Migration("20190801121930_mg004")]
    partial class mg004
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartRestaurant.Domain.Allergies.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Allergies.FoodAllergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<Guid>("AllergyId");

                    b.Property<Guid>("FoodId");

                    b.Property<bool>("IsDisabled");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Allergies.FoodIllness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<Guid>("FoodId");

                    b.Property<Guid>("IllnessId");

                    b.Property<bool>("IsDisabled");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("IllnessId");

                    b.ToTable("FoodIllnesses");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Allergies.Illness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.ToTable("Illnesses");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.City", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("IsoCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Issuer");

                    b.Property<Guid?>("OwnerId");

                    b.Property<Guid?>("RestaurantId");

                    b.Property<Guid?>("StaffId");

                    b.Property<int>("Type");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("StaffId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Country", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("CountryNameIndex");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.CountryCurrency", b =>
                {
                    b.Property<string>("CountryId");

                    b.Property<Guid>("CurrencyId");

                    b.Property<bool>("IsDisabled");

                    b.HasKey("CountryId", "CurrencyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CountriesCurrencies");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Currency", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("CurrencyNameIndex");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Feature", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Gallery", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<Guid?>("DishId");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("RestaurantId");

                    b.Property<string>("SlugUrl")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("TheCoverPictureId");

                    b.HasKey("Id");

                    b.HasIndex("DishId")
                        .IsUnique()
                        .HasFilter("[DishId] IS NOT NULL");

                    b.HasIndex("RestaurantId")
                        .IsUnique()
                        .HasFilter("[RestaurantId] IS NOT NULL");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Kitchen", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.ToTable("Kitchens");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Language", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsRTL")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("LanguageNameIndex");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Meal", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Picture", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<Guid?>("FoodCategoryId");

                    b.Property<Guid?>("FoodId");

                    b.Property<Guid?>("GalleryId");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("RestaurantId");

                    b.Property<string>("SlugUrl")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("FoodId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.PriceType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.ToTable("PriceTypes");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Recommendation", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.State", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("CountryId");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("IsoCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Translate", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("ColumnName");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("LanguageId");

                    b.Property<string>("PrimaryKeyName");

                    b.Property<string>("PrimaryKeyValue");

                    b.Property<string>("TableName");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Translates");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Unit", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SlugUrl");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UnitNameIndex");

                    b.HasIndex("Symbol")
                        .IsUnique();

                    b.ToTable("Units");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Dishes.Dish", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<bool>("CanBeAccompanying");

                    b.Property<string>("Description");

                    b.Property<Guid>("FamillyId");

                    b.Property<Guid?>("FamilyId");

                    b.Property<Guid?>("GalleryId");

                    b.Property<bool>("IsDisabled");

                    b.Property<Guid?>("MenuItemId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("RestaurantId");

                    b.Property<string>("SlugUrl")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Dishes.DishAccompanying", b =>
                {
                    b.Property<Guid>("ParentId");

                    b.Property<Guid>("AccompanyingId");

                    b.Property<bool>("IsDisabled");

                    b.HasKey("ParentId", "AccompanyingId");

                    b.HasIndex("AccompanyingId");

                    b.ToTable("DishAccompanying");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Dishes.DishEquivalence", b =>
                {
                    b.Property<Guid>("ParentId");

                    b.Property<Guid>("EquivalenceId");

                    b.Property<bool>("IsDisabled");

                    b.HasKey("ParentId", "EquivalenceId");

                    b.HasIndex("EquivalenceId");

                    b.ToTable("DishEquivalences");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Dishes.DishFamily", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("ParentId");

                    b.Property<Guid?>("PictureId");

                    b.Property<Guid>("RestaurantId");

                    b.Property<string>("SlugUrl")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.HasIndex("RestaurantId");

                    b.ToTable("DishFamillies");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Dishes.DishIngredient", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<Guid>("DishId");

                    b.Property<Guid>("FoodId");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsPrincipal");

                    b.Property<bool>("IsSwitchable");

                    b.Property<string>("Name");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FoodId");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Foods.Food", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<Guid>("FoodCategoryId");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsIndustriel");

                    b.Property<bool>("IsNatural");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("PictureId");

                    b.Property<string>("SlugUrl")
                        .IsRequired();

                    b.Property<Guid?>("UnitId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("FoodNameIndex");

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.HasIndex("UnitId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Foods.FoodCategory", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("ParentId");

                    b.Property<Guid?>("PictureId");

                    b.Property<string>("SlugUrl")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("FoodCategoryNameIndex");

                    b.HasIndex("ParentId");

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.ToTable("FoodCategories");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Foods.FoodComposition", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<Guid>("FoodId");

                    b.Property<bool>("IsDisabled");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodCompositions");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Mailing", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Action");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SlugUrl");

                    b.Property<string>("TableName");

                    b.Property<string>("TemplateId");

                    b.Property<Guid?>("TemplateId1");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId1");

                    b.ToTable("Mailings");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.MailingUser", b =>
                {
                    b.Property<Guid>("MailingId");

                    b.Property<string>("UserId");

                    b.Property<bool>("IsDisabled");

                    b.HasKey("MailingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MailingUsers");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Action");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SlugUrl");

                    b.Property<string>("TableName");

                    b.Property<string>("TemplateId");

                    b.Property<Guid?>("TemplateId1");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId1");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.NotificationUser", b =>
                {
                    b.Property<Guid>("NotificationId");

                    b.Property<string>("UserId");

                    b.Property<bool>("IsDisabled");

                    b.HasKey("NotificationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Pricings.DishTarification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<Guid>("DishId");

                    b.Property<bool>("IsDisabled");

                    b.Property<Guid>("TarificationId");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("TarificationId");

                    b.ToTable("DishTarifications");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Pricings.Pricing", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<Guid?>("DishId");

                    b.Property<decimal>("GainAmount");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsPercentage");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<Guid?>("ProductId");

                    b.Property<string>("SlugUrl");

                    b.Property<decimal>("Tva");

                    b.HasKey("Id");

                    b.HasIndex("DishId")
                        .IsUnique()
                        .HasFilter("[DishId] IS NOT NULL");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Pricings");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Pricings.ProductTarification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<bool>("IsDisabled");

                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("TarificationId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TarificationId");

                    b.ToTable("ProductTarifications");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Pricings.Tarification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Description");

                    b.Property<DateTime>("From");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsPercentage");

                    b.Property<string>("Name");

                    b.Property<Guid>("RestaurantId");

                    b.Property<string>("SlugUrl");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Tarifications");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<Guid?>("MenuItemId");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PictureId");

                    b.Property<Guid>("ProductFamilyId");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProductFamilyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Products.ProductFamily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<Guid>("RestaurantId");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("ProductFamilies");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<Guid>("FloorId");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Chain", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("OwnerId");

                    b.Property<string>("SlugUrl")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chains");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Floor", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("RestaurantId");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<Guid>("ChefId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<Guid>("RestaurantId");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.HasIndex("ChefId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsPackage");

                    b.Property<Guid>("MenuId");

                    b.Property<string>("Name");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Owner", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<int>("PlaceNumber");

                    b.Property<string>("SlugUrl");

                    b.Property<Guid>("TableId");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Restaurant", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<Guid?>("ChainId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("OwnerId");

                    b.Property<Guid>("RestaurantTypeId");

                    b.Property<string>("SlugUrl")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ChainId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RestaurantTypeId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantFeature", b =>
                {
                    b.Property<Guid>("RestaurantId");

                    b.Property<Guid>("FeatureId");

                    b.HasKey("RestaurantId", "FeatureId");

                    b.ToTable("RestaurantFeatures");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantKitchen", b =>
                {
                    b.Property<Guid>("RestaurantId");

                    b.Property<Guid>("KitchenId");

                    b.HasKey("RestaurantId", "KitchenId");

                    b.ToTable("RestaurantKitchens");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantMeal", b =>
                {
                    b.Property<Guid>("RestaurantId");

                    b.Property<Guid>("MealId");

                    b.HasKey("RestaurantId", "MealId");

                    b.ToTable("RestaurantMeals");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantPriceType", b =>
                {
                    b.Property<Guid>("RestaurantId");

                    b.Property<Guid>("PriceTypeId");

                    b.HasKey("RestaurantId", "PriceTypeId");

                    b.ToTable("RestaurantPriceTypes");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantRating", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<bool>("IsDisabled");

                    b.Property<Guid>("RestaurantId");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantRatings");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantRecommendation", b =>
                {
                    b.Property<Guid>("RestaurantId");

                    b.Property<Guid>("RecommendationId");

                    b.HasKey("RestaurantId", "RecommendationId");

                    b.ToTable("RestaurantRecommendations");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantSpecialty", b =>
                {
                    b.Property<Guid>("RestaurantId");

                    b.Property<Guid>("SpecialtyId");

                    b.HasKey("RestaurantId", "SpecialtyId");

                    b.ToTable("RestaurantSpecialties");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.ToTable("RestaurantTypes");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Staff", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("RestaurantId");

                    b.Property<int>("StaffRole");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<Guid>("AreaId");

                    b.Property<int>("Chair");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<int>("MaxChairCapacity");

                    b.Property<string>("Name");

                    b.Property<string>("SlugUrl");

                    b.Property<int>("TableNumber");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.SRUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("ChainId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("RestuarantId");

                    b.Property<string>("SlugUrl");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("SRUsers");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Services.Service", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<int>("Periode");

                    b.Property<Guid>("RestaurantId");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Services.ServiceDish", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<Guid?>("DishId");

                    b.Property<bool>("IsDisabled");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceDishes");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Services.ServiceProduct", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(5);

                    b.Property<bool>("IsDisabled");

                    b.Property<Guid?>("ProductId");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceProducts");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Services.ServiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ServiceId");

                    b.Property<string>("SlugUrl");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceStatus");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Body");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<string>("SlugUrl");

                    b.Property<string>("Subject");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Allergies.FoodAllergy", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Allergies.Allergy", "Allergy")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Foods.Food", "Food")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Allergies.FoodIllness", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Foods.Food", "Food")
                        .WithMany("FoodIllnesses")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Allergies.Illness", "Illness")
                        .WithMany("FoodIllnesses")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.City", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Commun.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Contact", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Owner", "Owner")
                        .WithMany("Contacts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("Contacts")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Staff", "Staff")
                        .WithMany("Contacts")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.CountryCurrency", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Commun.Country", "Country")
                        .WithMany("Currencies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Commun.Currency", "Currency")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Gallery", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Dishes.Dish", "Dish")
                        .WithOne("Gallery")
                        .HasForeignKey("SmartRestaurant.Domain.Commun.Gallery", "DishId");

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithOne("Gallery")
                        .HasForeignKey("SmartRestaurant.Domain.Commun.Gallery", "RestaurantId");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Picture", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Foods.FoodCategory", "FoodCategory")
                        .WithMany()
                        .HasForeignKey("FoodCategoryId");

                    b.HasOne("SmartRestaurant.Domain.Foods.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId");

                    b.HasOne("SmartRestaurant.Domain.Commun.Gallery", "Gallery")
                        .WithMany("Pictures")
                        .HasForeignKey("GalleryId");

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.State", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Commun.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Commun.Translate", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Commun.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Dishes.Dish", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Dishes.DishFamily", "Family")
                        .WithMany("Dishes")
                        .HasForeignKey("FamilyId");

                    b.HasOne("SmartRestaurant.Domain.Restaurants.MenuItem")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuItemId");

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("Dishes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Time", "PreparationTime", b1 =>
                        {
                            b1.Property<Guid>("DishId");

                            b1.Property<TimeSpan>("Value");

                            b1.HasKey("DishId");

                            b1.ToTable("Dishes");

                            b1.HasOne("SmartRestaurant.Domain.Dishes.Dish")
                                .WithOne("PreparationTime")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Time", "DishId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Time", "ServiceTime", b1 =>
                        {
                            b1.Property<Guid>("DishId");

                            b1.Property<TimeSpan>("Value");

                            b1.HasKey("DishId");

                            b1.ToTable("Dishes");

                            b1.HasOne("SmartRestaurant.Domain.Dishes.Dish")
                                .WithOne("ServiceTime")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Time", "DishId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Dishes.DishAccompanying", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Dishes.Dish", "Accompanying")
                        .WithMany("ChildAccompaniments")
                        .HasForeignKey("AccompanyingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Dishes.Dish", "Parent")
                        .WithMany("ParentAccompaniments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("DishAccompanyingParentId");

                            b1.Property<Guid>("DishAccompanyingAccompanyingId");

                            b1.Property<Guid>("UnitId");

                            b1.Property<decimal>("Value");

                            b1.HasKey("DishAccompanyingParentId", "DishAccompanyingAccompanyingId");

                            b1.HasIndex("UnitId");

                            b1.ToTable("DishAccompanying");

                            b1.HasOne("SmartRestaurant.Domain.Commun.Unit", "Unit")
                                .WithMany()
                                .HasForeignKey("UnitId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("SmartRestaurant.Domain.Dishes.DishAccompanying")
                                .WithOne("Quantity")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Quantity", "DishAccompanyingParentId", "DishAccompanyingAccompanyingId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Dishes.DishEquivalence", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Dishes.Dish", "Equivalence")
                        .WithMany("ChildEquivalences")
                        .HasForeignKey("EquivalenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Dishes.Dish", "Parent")
                        .WithMany("ParentEquivalences")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("DishEquivalenceParentId");

                            b1.Property<Guid>("DishEquivalenceEquivalenceId");

                            b1.Property<Guid>("UnitId");

                            b1.Property<decimal>("Value");

                            b1.HasKey("DishEquivalenceParentId", "DishEquivalenceEquivalenceId");

                            b1.HasIndex("UnitId");

                            b1.ToTable("DishEquivalences");

                            b1.HasOne("SmartRestaurant.Domain.Commun.Unit", "Unit")
                                .WithMany()
                                .HasForeignKey("UnitId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("SmartRestaurant.Domain.Dishes.DishEquivalence")
                                .WithOne("Quantity")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Quantity", "DishEquivalenceParentId", "DishEquivalenceEquivalenceId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Dishes.DishFamily", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Dishes.DishFamily", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartRestaurant.Domain.Commun.Picture", "Picture")
                        .WithOne()
                        .HasForeignKey("SmartRestaurant.Domain.Dishes.DishFamily", "PictureId");

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("DishFamilies")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Dishes.DishIngredient", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Dishes.Dish", "Dish")
                        .WithMany("Ingredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartRestaurant.Domain.Foods.Food", "Food")
                        .WithMany("DishIngredients")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("DishIngredientId");

                            b1.Property<Guid>("UnitId");

                            b1.Property<decimal>("Value");

                            b1.HasKey("DishIngredientId");

                            b1.HasIndex("UnitId");

                            b1.ToTable("DishIngredients");

                            b1.HasOne("SmartRestaurant.Domain.Dishes.DishIngredient")
                                .WithOne("Quantity")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Quantity", "DishIngredientId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("SmartRestaurant.Domain.Commun.Unit", "Unit")
                                .WithMany()
                                .HasForeignKey("UnitId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Foods.Food", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Foods.FoodCategory", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Commun.Picture", "Picture")
                        .WithOne()
                        .HasForeignKey("SmartRestaurant.Domain.Foods.Food", "PictureId");

                    b.HasOne("SmartRestaurant.Domain.Commun.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Nutrition", "Nutrition", b1 =>
                        {
                            b1.Property<Guid>("FoodId");

                            b1.Property<decimal>("Calorie");

                            b1.Property<decimal>("Carbohydrate");

                            b1.Property<decimal>("Fibre");

                            b1.Property<decimal>("GlycemicIndex");

                            b1.Property<decimal>("Lipid");

                            b1.Property<decimal>("Protein");

                            b1.HasKey("FoodId");

                            b1.ToTable("Foods");

                            b1.HasOne("SmartRestaurant.Domain.Foods.Food")
                                .WithOne("Nutrition")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Nutrition", "FoodId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("SmartRestaurant.Domain.Commun.Quantity", "Quantity", b2 =>
                                {
                                    b2.Property<Guid>("NutritionFoodId");

                                    b2.Property<Guid>("UnitId");

                                    b2.Property<decimal>("Value");

                                    b2.HasKey("NutritionFoodId");

                                    b2.HasIndex("UnitId");

                                    b2.ToTable("Foods");

                                    b2.HasOne("SmartRestaurant.Domain.Commun.Nutrition")
                                        .WithOne("Quantity")
                                        .HasForeignKey("SmartRestaurant.Domain.Commun.Quantity", "NutritionFoodId")
                                        .OnDelete(DeleteBehavior.Cascade);

                                    b2.HasOne("SmartRestaurant.Domain.Commun.Unit", "Unit")
                                        .WithMany()
                                        .HasForeignKey("UnitId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Foods.FoodCategory", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Foods.FoodCategory", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.HasOne("SmartRestaurant.Domain.Commun.Picture", "Picture")
                        .WithOne()
                        .HasForeignKey("SmartRestaurant.Domain.Foods.FoodCategory", "PictureId");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Foods.FoodComposition", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Foods.Food", "Food")
                        .WithMany("Compositions")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("FoodCompositionId");

                            b1.Property<Guid>("UnitId");

                            b1.Property<decimal>("Value");

                            b1.HasKey("FoodCompositionId");

                            b1.HasIndex("UnitId");

                            b1.ToTable("FoodCompositions");

                            b1.HasOne("SmartRestaurant.Domain.Foods.FoodComposition")
                                .WithOne("Quantity")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Quantity", "FoodCompositionId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("SmartRestaurant.Domain.Commun.Unit", "Unit")
                                .WithMany()
                                .HasForeignKey("UnitId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Mailing", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId1");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.MailingUser", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Mailing", "Mailing")
                        .WithMany("Users")
                        .HasForeignKey("MailingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.SRUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Notification", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId1");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.NotificationUser", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.SRUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Pricings.DishTarification", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Dishes.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Pricings.Tarification", "Tarification")
                        .WithMany("DishTarifications")
                        .HasForeignKey("TarificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Pricings.Pricing", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Dishes.Dish", "Dish")
                        .WithOne("Pricing")
                        .HasForeignKey("SmartRestaurant.Domain.Pricings.Pricing", "DishId");

                    b.HasOne("SmartRestaurant.Domain.Products.Product", "Product")
                        .WithOne("Pricing")
                        .HasForeignKey("SmartRestaurant.Domain.Pricings.Pricing", "ProductId");

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Price", "Gain", b1 =>
                        {
                            b1.Property<Guid>("SalePricingId");

                            b1.Property<decimal>("Amount");

                            b1.Property<Guid>("CurrencyId");

                            b1.HasKey("SalePricingId");

                            b1.HasIndex("CurrencyId");

                            b1.ToTable("Pricings");

                            b1.HasOne("SmartRestaurant.Domain.Commun.Currency", "Currency")
                                .WithMany()
                                .HasForeignKey("CurrencyId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("SmartRestaurant.Domain.Pricings.Pricing")
                                .WithOne("Gain")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Price", "SalePricingId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Price", "PurchasePriceHT", b1 =>
                        {
                            b1.Property<Guid>("PurchasePricingId");

                            b1.Property<decimal>("Amount");

                            b1.Property<Guid>("CurrencyId");

                            b1.HasKey("PurchasePricingId");

                            b1.HasIndex("CurrencyId");

                            b1.ToTable("Pricings");

                            b1.HasOne("SmartRestaurant.Domain.Commun.Currency", "Currency")
                                .WithMany()
                                .HasForeignKey("CurrencyId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("SmartRestaurant.Domain.Pricings.Pricing")
                                .WithOne("PurchasePriceHT")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Price", "PurchasePricingId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Pricings.ProductTarification", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Products.Product", "Product")
                        .WithMany("ProductTarifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Pricings.Tarification", "Tarification")
                        .WithMany("ProductTarifications")
                        .HasForeignKey("TarificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Pricings.Tarification", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("Tarifications")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Products.Product", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.MenuItem")
                        .WithMany("Products")
                        .HasForeignKey("MenuItemId");

                    b.HasOne("SmartRestaurant.Domain.Commun.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.HasOne("SmartRestaurant.Domain.Products.ProductFamily", "ProductFamily")
                        .WithMany("Products")
                        .HasForeignKey("ProductFamilyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Products.ProductFamily", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("ProductFamilies")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Area", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Floor", "Floor")
                        .WithMany("Areas")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Chain", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Owner", "Owner")
                        .WithMany("Chains")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Floor", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("Floors")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Menu", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Staff", "Chef")
                        .WithMany()
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.MenuItem", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Owner", b =>
                {
                    b.OwnsOne("SmartRestaurant.Domain.Commun.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OwnerId");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("Latitude");

                            b1.Property<string>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("Street");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.HasOne("SmartRestaurant.Domain.Restaurants.Owner")
                                .WithOne("Address")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Address", "OwnerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Place", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Restaurant", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Chain", "Chain")
                        .WithMany("Restaurants")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Owner", "Owner")
                        .WithMany("Restaurants")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.RestaurantType", "RestaurantType")
                        .WithMany("Restaurants")
                        .HasForeignKey("RestaurantTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.PriceRange", "PriceRange", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId");

                            b1.Property<Guid>("CurrencyId");

                            b1.Property<decimal>("MaxAmount");

                            b1.Property<decimal>("MinAmount");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("CurrencyId");

                            b1.ToTable("Restaurants");

                            b1.HasOne("SmartRestaurant.Domain.Commun.Currency", "Currency")
                                .WithMany()
                                .HasForeignKey("CurrencyId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant")
                                .WithOne("PriceRange")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.PriceRange", "RestaurantId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("Latitude");

                            b1.Property<string>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("Street");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurants");

                            b1.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant")
                                .WithOne("Address")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Address", "RestaurantId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantFeature", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Commun.Feature", "Feature")
                        .WithMany("RestaurantFeatures")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("RestaurantFeatures")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantKitchen", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Commun.Kitchen", "Kitchen")
                        .WithMany("RestaurantKitchens")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("RestaurantKitchens")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantMeal", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Commun.Meal", "Meal")
                        .WithMany("RestaurantMeals")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("RestaurantMeals")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantPriceType", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Commun.PriceType", "PriceType")
                        .WithMany("RestaurantPriceTypes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("RestaurantPriceTypes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantRating", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("RestaurantRatings")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantRecommendation", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Commun.Recommendation", "Recommendation")
                        .WithMany("RestaurantRecommendations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("RestaurantRecommendations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.RestaurantSpecialty", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Commun.Speciality", "Specialty")
                        .WithMany("RestaurantSpecialties")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("RestaurantSpecialties")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Staff", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany("Staffs")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("StaffId");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("Latitude");

                            b1.Property<string>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("Street");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staffs");

                            b1.HasOne("SmartRestaurant.Domain.Restaurants.Staff")
                                .WithOne("Address")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Address", "StaffId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Restaurants.Table", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Area", "Area")
                        .WithMany("Tables")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Services.Service", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Restaurants.Restaurant")
                        .WithMany("Services")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.ServiceDateTime", "DateService", b1 =>
                        {
                            b1.Property<Guid>("ServiceId");

                            b1.Property<DateTime>("Date");

                            b1.HasKey("ServiceId");

                            b1.ToTable("Services");

                            b1.HasOne("SmartRestaurant.Domain.Services.Service")
                                .WithOne("DateService")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.ServiceDateTime", "ServiceId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("SmartRestaurant.Domain.Commun.Time", "EndTime", b2 =>
                                {
                                    b2.Property<Guid>("ServiceDateTimeServiceId");

                                    b2.Property<TimeSpan>("Value");

                                    b2.HasKey("ServiceDateTimeServiceId");

                                    b2.ToTable("Services");

                                    b2.HasOne("SmartRestaurant.Domain.Commun.ServiceDateTime")
                                        .WithOne("EndTime")
                                        .HasForeignKey("SmartRestaurant.Domain.Commun.Time", "ServiceDateTimeServiceId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("SmartRestaurant.Domain.Commun.Time", "StartTime", b2 =>
                                {
                                    b2.Property<Guid>("ServiceDateTimeServiceId");

                                    b2.Property<TimeSpan>("Value");

                                    b2.HasKey("ServiceDateTimeServiceId");

                                    b2.ToTable("Services");

                                    b2.HasOne("SmartRestaurant.Domain.Commun.ServiceDateTime")
                                        .WithOne("StartTime")
                                        .HasForeignKey("SmartRestaurant.Domain.Commun.Time", "ServiceDateTimeServiceId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Services.ServiceDish", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Dishes.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.HasOne("SmartRestaurant.Domain.Services.Service", "Service")
                        .WithMany("ServiceDishes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("ServiceDishId");

                            b1.Property<Guid>("UnitId");

                            b1.Property<decimal>("Value");

                            b1.HasKey("ServiceDishId");

                            b1.HasIndex("UnitId");

                            b1.ToTable("ServiceDishes");

                            b1.HasOne("SmartRestaurant.Domain.Services.ServiceDish")
                                .WithOne("Quantity")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Quantity", "ServiceDishId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("SmartRestaurant.Domain.Commun.Unit", "Unit")
                                .WithMany()
                                .HasForeignKey("UnitId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Services.ServiceProduct", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SmartRestaurant.Domain.Services.Service", "Service")
                        .WithMany("ServiceProducts")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SmartRestaurant.Domain.Commun.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("ServiceProductId");

                            b1.Property<Guid>("UnitId");

                            b1.Property<decimal>("Value");

                            b1.HasKey("ServiceProductId");

                            b1.HasIndex("UnitId");

                            b1.ToTable("ServiceProducts");

                            b1.HasOne("SmartRestaurant.Domain.Services.ServiceProduct")
                                .WithOne("Quantity")
                                .HasForeignKey("SmartRestaurant.Domain.Commun.Quantity", "ServiceProductId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("SmartRestaurant.Domain.Commun.Unit", "Unit")
                                .WithMany()
                                .HasForeignKey("UnitId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Services.ServiceStatus", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Services.Service")
                        .WithMany("ServiceStatus")
                        .HasForeignKey("ServiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
