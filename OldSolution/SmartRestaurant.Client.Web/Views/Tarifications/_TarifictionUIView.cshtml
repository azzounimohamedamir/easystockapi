@using SmartRestaurant.Client.Web.Models.Pricings
@using SmartRestaurant.Resources.Foods.Foods
@model SmartRestaurant.Client.Web.Models.Pricings.TarificationViewModel

<section>
    <div class="row">
        <div class="col-xs-12">
            <div class="card">
                <div class="card-body collapse in">
                    <div class="card-block">
                        <form asp-action="Add" class="steps-wizard-form wizard-circle" enctype="multipart/form-data">

                            <!-- Step 1 -->
                            <h6>@FoodResource.Infos</h6>
                            <fieldset></fieldset>
                            <!-- Step 2 -->
                            <h6>@FoodResource.Nutrition</h6>
                            <fieldset></fieldset>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $.validator.setDefaults({ ignore: '' });
        var form = $(".steps-wizard-form").show();
        $(".steps-wizard-form").steps({
            headerTag: "h6",
            bodyTag: "fieldset",
            transitionEffect: "fade",
            titleTemplate: '<span class="step">#index#</span> #title#',
            labels: {
                finish: 'Enregistrer',
                previous: 'Précédent',
                next: 'Suivant'
            },
            onStepChanging: function (event, currentIndex, newIndex) {
                // Allways allow previous action even if the current form is not valid!
                if (currentIndex > newIndex) {
                    return true;
                }
                // Needed in some cases if the user went back (clean up)
                if (currentIndex < newIndex) {
                    // To remove error styles
                    form.find(".body:eq(" + newIndex + ") label.error").remove();
                    form.find(".body:eq(" + newIndex + ") .error").removeClass("error");
                }
                form.validate().settings.ignore = ":disabled";

                //return form.valid();
                var target = $(".current");
                return !Validate(target);

            },
            onFinishing: function (event, currentIndex) {
                form.validate().settings.ignore = ":disabled";
                return form.valid();

            },
            onFinished: function (event, currentIndex) {
                form.submit();
            }
        });
    </script>
}