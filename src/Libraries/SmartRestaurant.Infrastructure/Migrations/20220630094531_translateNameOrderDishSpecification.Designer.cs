// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartRestaurant.Infrastructure.Persistence;

namespace SmartRestaurant.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220630094531_translateNameOrderDishSpecification")]
    partial class translateNameOrderDishSpecification
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Dish", b =>
                {
                    b.Property<Guid>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("EnergeticValue")
                        .HasColumnType("real");

                    b.Property<int>("EstimatedPreparationTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSupplement")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("DishId");

                    b.HasIndex("FoodBusinessId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.DishComboBoxItemTranslation", b =>
                {
                    b.Property<Guid>("DishComboBoxItemTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishSpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DishComboBoxItemTranslationId");

                    b.HasIndex("DishSpecificationId");

                    b.ToTable("DishComboBoxItemTranslations");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.DishIngredient", b =>
                {
                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AmountIncreasePerStep")
                        .HasColumnType("real");

                    b.Property<float>("InitialAmount")
                        .HasColumnType("real");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<float>("MaximumAmount")
                        .HasColumnType("real");

                    b.Property<int>("MeasurementUnits")
                        .HasColumnType("int");

                    b.Property<float>("MinimumAmount")
                        .HasColumnType("real");

                    b.Property<float>("PriceIncreasePerStep")
                        .HasColumnType("real");

                    b.HasKey("DishId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.DishSpecification", b =>
                {
                    b.Property<Guid>("DishSpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CheckBoxContent")
                        .HasColumnType("bit");

                    b.Property<string>("ComboBoxContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DishSpecificationId");

                    b.HasIndex("DishId");

                    b.ToTable("DishSpecifications");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.DishSupplement", b =>
                {
                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DishId", "SupplementId");

                    b.HasIndex("SupplementId");

                    b.ToTable("DishSupplements");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.FoodBusiness", b =>
                {
                    b.Property<Guid>("FoodBusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptTakeout")
                        .HasColumnType("bit");

                    b.Property<bool>("AcceptsCreditCards")
                        .HasColumnType("bit");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultCurrency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodBusinessAdministratorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodBusinessCategory")
                        .HasColumnType("int");

                    b.Property<int>("FoodBusinessState")
                        .HasColumnType("int");

                    b.Property<int>("FourDigitCode")
                        .HasColumnType("int");

                    b.Property<bool>("HasCarParking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityFrozen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHandicapFriendly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NIF")
                        .HasColumnType("int");

                    b.Property<int>("NIS")
                        .HasColumnType("int");

                    b.Property<int>("NRC")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberRatings")
                        .HasColumnType("int");

                    b.Property<bool>("OffersTakeout")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderNumberLastResetDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodBusinessId");

                    b.ToTable("FoodBusinesses");

                    b.HasData(
                        new
                        {
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            AcceptTakeout = true,
                            AcceptsCreditCards = true,
                            AverageRating = 4.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultCurrency = 0,
                            Description = "Envie de découvrir la cuisine indienne, le restaurant Taj Mahal vous invite à le faire et voyager à travers les odeurs des épices orientales qui se dégagent de ses mets à spécialités indiennes.",
                            FoodBusinessAdministratorId = "3cbf3570-4444-4444-8746-29b7cf568093",
                            FoodBusinessCategory = 0,
                            FoodBusinessState = 0,
                            FourDigitCode = 0,
                            HasCarParking = true,
                            IsActivityFrozen = false,
                            IsHandicapFriendly = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NIF = 0,
                            NIS = 0,
                            NRC = 0,
                            Name = "Taj mahal",
                            NumberRatings = 0,
                            OffersTakeout = true,
                            OrderNumberLastResetDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Website = "https://restoalgerie.com/restaurant/taj-mahal-restaurant-indien/"
                        },
                        new
                        {
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            AcceptTakeout = true,
                            AcceptsCreditCards = true,
                            AverageRating = 4.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultCurrency = 0,
                            Description = "",
                            FoodBusinessAdministratorId = "44bf3570-0d44-4673-8746-29b7cf568088",
                            FoodBusinessCategory = 0,
                            FoodBusinessState = 0,
                            FourDigitCode = 0,
                            HasCarParking = true,
                            IsActivityFrozen = false,
                            IsHandicapFriendly = true,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NIF = 0,
                            NIS = 0,
                            NRC = 0,
                            Name = "Mcdonald's",
                            NumberRatings = 0,
                            OffersTakeout = true,
                            OrderNumberLastResetDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Website = ""
                        },
                        new
                        {
                            FoodBusinessId = new Guid("88bc7853-220f-9173-3246-afb7cf595022"),
                            AcceptTakeout = true,
                            AcceptsCreditCards = true,
                            AverageRating = 5.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultCurrency = 0,
                            Description = "ETuoYe SMdsYsup qqbdspY NEeZvsaI sUcIOE sVmPkJx RZFk FOKzUkG ffAsUB XyINU fhhIB OiIfN Antdhb XHbtaO UlStFP adgVv CRTToT Mcv FAHcd YyGH. CdDIPW TtDBaI qYg wVcSK NAXHnVC xpNBE fRufEW fggeTKc Iqq dfGZPAqoc MYxnH NCLtDA qqV TNYR LbwaYqv cvIiSvl KBTMl xAxHmu dilIqO mGM kxDhvLT PsYPdCB yZE uFfvGxQp uvoeDsAaE QQjgKs CnAnhrs qNPzSuq bvZjqMfy aaEGCqc XrvE KFXnmA mEnN uGHJt WypGwSiJDmP qBDWYau SzbxbSRUb CMwhBXiYA vQCTdtiB oVkRA XpHYTFE BYFpDTVlV zafiNugG YFyiIvYhhgyzj MihfVEqk OWlRLG YAUn sXWO jbKyczKOQfhXa qziTc xxMFCM WfVzT oPdKGSK Zz CzXeis.",
                            FoodBusinessAdministratorId = "08a1a626-7f8e-4b51-84fc-fc51b6302cca",
                            FoodBusinessCategory = 0,
                            FoodBusinessState = 0,
                            FourDigitCode = 0,
                            HasCarParking = false,
                            IsActivityFrozen = false,
                            IsHandicapFriendly = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NIF = 0,
                            NIS = 0,
                            NRC = 0,
                            Name = "BigMama",
                            NumberRatings = 0,
                            OffersTakeout = true,
                            OrderNumberLastResetDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Website = "https://bigmama.com"
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.FoodBusinessClient", b =>
                {
                    b.Property<Guid>("FoodBusinessClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NIF")
                        .HasColumnType("int");

                    b.Property<int>("NIS")
                        .HasColumnType("int");

                    b.Property<int>("NRC")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodBusinessClientId");

                    b.HasIndex("FoodBusinessId");

                    b.ToTable("FoodBusinessClients");

                    b.HasData(
                        new
                        {
                            FoodBusinessClientId = new Guid("e6f980ba-c381-4319-8b62-da017e116692"),
                            Archived = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SONATRACH est la première entreprise du continent africain. Une société intégrée de l'Amont à l'Aval pétrolier et gazier et un Groupe internationale.",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManagerId = "a3dbd500-eab0-4233-86fd-7f1a4195f9a9",
                            NIF = 0,
                            NIS = 0,
                            NRC = 0,
                            Name = "Sonatrach",
                            Website = "https://sonatrach.com/"
                        },
                        new
                        {
                            FoodBusinessClientId = new Guid("1eb2b784-074d-4be4-afb7-9708331c0c63"),
                            Archived = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cevital is a family-run Group whose success and reputation are rooted in its history, its track record and its values.",
                            FoodBusinessId = new Guid("88bc7853-220f-9173-3246-afb7cf595022"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManagerId = "ba89dc5f-dfd1-4c87-9372-233c611cc756",
                            NIF = 0,
                            NIS = 0,
                            NRC = 0,
                            Name = "CEVITAL",
                            Website = "https://cevital.com/"
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.FoodBusinessImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodBusinessImages");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.FoodBusinessUser", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "FoodBusinessId");

                    b.HasIndex("FoodBusinessId");

                    b.ToTable("FoodBusinessUsers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093")
                        },
                        new
                        {
                            ApplicationUserId = "d466ef00-61f1-4e77-801a-b516f0f12323",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093")
                        },
                        new
                        {
                            ApplicationUserId = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099")
                        },
                        new
                        {
                            ApplicationUserId = "64fed988-6f68-49dc-ad54-0da50ec02319",
                            FoodBusinessId = new Guid("88bc7853-220f-9173-3246-afb7cf595022")
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Globalisation.Currency", b =>
                {
                    b.Property<Guid>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Illness", b =>
                {
                    b.Property<Guid>("IllnessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IllnessId");

                    b.ToTable("Illnesses");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.IngredientIllness", b =>
                {
                    b.Property<Guid>("IllnessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("IllnessId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientIllnesses");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.LinkedDevice", b =>
                {
                    b.Property<Guid>("LinkedDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierDevice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LinkedDeviceId");

                    b.HasIndex("FoodBusinessId");

                    b.ToTable("LinkedDevices");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = new Guid("ccaecd78-ccbb-ee04-56ff-88887129aaba"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(475),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "TajMhal Dishes Menu"
                        },
                        new
                        {
                            MenuId = new Guid("ccaecd78-ccbb-ee04-56ff-88887129aabb"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(813),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "TajMhal Pizza Menu"
                        },
                        new
                        {
                            MenuId = new Guid("ccaecd78-ccbb-ee04-56ff-88887129aabc"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(830),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "TajMhal Sandwiches Menu"
                        },
                        new
                        {
                            MenuId = new Guid("ccaecd78-ccbb-ee04-56ff-88887129aabd"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(834),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "TajMhal Beverage  Menu"
                        },
                        new
                        {
                            MenuId = new Guid("ccaecd78-ccbb-ee04-56ff-88887129aabe"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(839),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "TajMhal Dessert Menu"
                        },
                        new
                        {
                            MenuId = new Guid("ccaecd78-ccbb-ee04-56ff-88887129aa00"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(843),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "Mcdonald Sandwiches Menu"
                        },
                        new
                        {
                            MenuId = new Guid("ccaecd78-ccbb-ee04-56ff-88887129aa01"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(847),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "Mcdonald Beverage  Menu"
                        },
                        new
                        {
                            MenuId = new Guid("ccaecd78-ccbb-ee04-56ff-88887129aa02"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(851),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "Mcdonald Dessert Menu"
                        },
                        new
                        {
                            MenuId = new Guid("e2289d77-b8e1-4476-bf66-e64f1a23d752"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(855),
                            CreatedBy = "64fed988-6f68-49dc-ad54-0da50ec02319",
                            FoodBusinessId = new Guid("88bc7853-220f-9173-3246-afb7cf595022"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "BigMama Sandwiches Menu"
                        },
                        new
                        {
                            MenuId = new Guid("8f8c0139-1f90-40f3-ab88-5db2de45ff2e"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(859),
                            CreatedBy = "64fed988-6f68-49dc-ad54-0da50ec02319",
                            FoodBusinessId = new Guid("88bc7853-220f-9173-3246-afb7cf595022"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "BigMama Beverage  Menu"
                        },
                        new
                        {
                            MenuId = new Guid("45051fc7-6983-44a5-9c12-66116c4533bf"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 293, DateTimeKind.Local).AddTicks(862),
                            CreatedBy = "64fed988-6f68-49dc-ad54-0da50ec02319",
                            FoodBusinessId = new Guid("88bc7853-220f-9173-3246-afb7cf595022"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuState = 0,
                            Name = "BigMama Dessert Menu"
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.MonthlyCommission", b =>
                {
                    b.Property<Guid>("MonthlyCommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Month")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("TotalToPay")
                        .HasColumnType("real");

                    b.Property<int>("numberOfOrdersOrPersons")
                        .HasColumnType("int");

                    b.HasKey("MonthlyCommissionId");

                    b.HasIndex("FoodBusinessId");

                    b.ToTable("MonthlyCommission");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid?>("FoodBusinessClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MoneyReceived")
                        .HasColumnType("real");

                    b.Property<float>("MoneyReturned")
                        .HasColumnType("real");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TVA")
                        .HasColumnType("int");

                    b.Property<float>("TotalToPay")
                        .HasColumnType("real");

                    b.Property<float>("TotalToPayWithoutCommissionValue")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("FoodBusinessClientId");

                    b.HasIndex("FoodBusinessId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderComboBoxItemTranslation", b =>
                {
                    b.Property<Guid>("OrderComboBoxItemTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderDishSpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderComboBoxItemTranslationId");

                    b.HasIndex("OrderDishSpecificationId");

                    b.ToTable("OrderComboBoxItemTranslations");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderDish", b =>
                {
                    b.Property<Guid>("OrderDishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChairNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("DishId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("EnergeticValue")
                        .HasColumnType("real");

                    b.Property<int>("EstimatedPreparationTime")
                        .HasColumnType("int");

                    b.Property<float>("InitialPrice")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("OrderDishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDishes");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderDishIngredient", b =>
                {
                    b.Property<Guid>("OrderDishIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("AmountIncreasePerStep")
                        .HasColumnType("real");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<float>("MaximumAmount")
                        .HasColumnType("real");

                    b.Property<int>("MeasurementUnits")
                        .HasColumnType("int");

                    b.Property<float>("MinimumAmount")
                        .HasColumnType("real");

                    b.Property<Guid>("OrderDishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceIncreasePerStep")
                        .HasColumnType("real");

                    b.Property<int>("Steps")
                        .HasColumnType("int");

                    b.HasKey("OrderDishIngredientId");

                    b.HasIndex("OrderDishId");

                    b.ToTable("OrderDishIngredients");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderDishSpecification", b =>
                {
                    b.Property<Guid>("OrderDishSpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CheckBoxContent")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckBoxSelection")
                        .HasColumnType("bit");

                    b.Property<string>("ComboBoxContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComboBoxSelection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderDishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderDishSpecificationId");

                    b.HasIndex("OrderDishId");

                    b.ToTable("OrderDishSpecifications");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderDishSupplement", b =>
                {
                    b.Property<Guid>("OrderDishSupplementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("EnergeticValue")
                        .HasColumnType("real");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderDishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("SupplementId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderDishSupplementId");

                    b.HasIndex("OrderDishId");

                    b.ToTable("OrderDishSupplements");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderOccupiedTable", b =>
                {
                    b.Property<Guid>("OrderOccupiedTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderOccupiedTableId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderOccupiedTables");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChairNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<float>("EnergeticValue")
                        .HasColumnType("real");

                    b.Property<float>("InitialPrice")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("EnergeticValue")
                        .HasColumnType("real");

                    b.Property<Guid?>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("FoodBusinessId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfDiners")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationId");

                    b.HasIndex("FoodBusinessId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596300"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(3645),
                            CreatedBy = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 2,
                            ReservationDate = new DateTime(2022, 6, 30, 15, 45, 30, 290, DateTimeKind.Local).AddTicks(9091),
                            ReservationName = "ReservationName_00"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596301"),
                            CreatedAt = new DateTime(2022, 6, 30, 15, 45, 30, 292, DateTimeKind.Local).AddTicks(4179),
                            CreatedBy = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 5,
                            ReservationDate = new DateTime(2022, 6, 30, 18, 45, 30, 292, DateTimeKind.Local).AddTicks(4150),
                            ReservationName = "ReservationName_01"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596302"),
                            CreatedAt = new DateTime(2022, 6, 15, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4215),
                            CreatedBy = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 3,
                            ReservationDate = new DateTime(2022, 7, 1, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4193),
                            ReservationName = "ReservationName_02"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596303"),
                            CreatedAt = new DateTime(2022, 7, 15, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4284),
                            CreatedBy = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 2,
                            ReservationDate = new DateTime(2027, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4221),
                            ReservationName = "ReservationName_03"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596304"),
                            CreatedAt = new DateTime(2022, 6, 30, 11, 21, 30, 292, DateTimeKind.Local).AddTicks(4295),
                            CreatedBy = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 8,
                            ReservationDate = new DateTime(2037, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4290),
                            ReservationName = "ReservationName_04"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596305"),
                            CreatedAt = new DateTime(2022, 6, 29, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4312),
                            CreatedBy = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 13,
                            ReservationDate = new DateTime(2022, 6, 30, 7, 45, 30, 292, DateTimeKind.Local).AddTicks(4311),
                            ReservationName = "ReservationName_05"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596306"),
                            CreatedAt = new DateTime(2022, 5, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4317),
                            CreatedBy = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 7,
                            ReservationDate = new DateTime(2022, 6, 18, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4316),
                            ReservationName = "ReservationName_06"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596307"),
                            CreatedAt = new DateTime(2022, 4, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4325),
                            CreatedBy = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 9,
                            ReservationDate = new DateTime(2022, 5, 8, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4324),
                            ReservationName = "ReservationName_07"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596308"),
                            CreatedAt = new DateTime(2022, 10, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4331),
                            CreatedBy = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 4,
                            ReservationDate = new DateTime(2022, 11, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4329),
                            ReservationName = "ReservationName_08"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596309"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4337),
                            CreatedBy = "6b14cd00-59f0-4422-bfce-07c080829987",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 3,
                            ReservationDate = new DateTime(2022, 6, 30, 14, 45, 30, 292, DateTimeKind.Local).AddTicks(4335),
                            ReservationName = "ReservationName_09"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596310"),
                            CreatedAt = new DateTime(2022, 6, 30, 15, 45, 30, 292, DateTimeKind.Local).AddTicks(4342),
                            CreatedBy = "6b14cd00-59f0-4422-bfce-07c080829987",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 6,
                            ReservationDate = new DateTime(2022, 6, 30, 17, 45, 30, 292, DateTimeKind.Local).AddTicks(4341),
                            ReservationName = "ReservationName_10"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596311"),
                            CreatedAt = new DateTime(2022, 6, 16, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4347),
                            CreatedBy = "6b14cd00-59f0-4422-bfce-07c080829987",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 4,
                            ReservationDate = new DateTime(2022, 7, 2, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4346),
                            ReservationName = "ReservationName_11"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596312"),
                            CreatedAt = new DateTime(2022, 8, 20, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4353),
                            CreatedBy = "6b14cd00-59f0-4422-bfce-07c080829987",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 3,
                            ReservationDate = new DateTime(2026, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4351),
                            ReservationName = "ReservationName_12"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596313"),
                            CreatedAt = new DateTime(2022, 6, 30, 11, 21, 30, 292, DateTimeKind.Local).AddTicks(4358),
                            CreatedBy = "6b14cd00-59f0-4422-bfce-07c080829987",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 9,
                            ReservationDate = new DateTime(2037, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4357),
                            ReservationName = "ReservationName_13"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596314"),
                            CreatedAt = new DateTime(2022, 6, 28, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4364),
                            CreatedBy = "6b14cd00-59f0-4422-bfce-07c080829987",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 14,
                            ReservationDate = new DateTime(2022, 6, 30, 6, 45, 30, 292, DateTimeKind.Local).AddTicks(4362),
                            ReservationName = "ReservationName_14"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596315"),
                            CreatedAt = new DateTime(2022, 5, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4369),
                            CreatedBy = "6b14cd00-59f0-4422-bfce-07c080829987",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 8,
                            ReservationDate = new DateTime(2022, 6, 17, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4368),
                            ReservationName = "ReservationName_15"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596316"),
                            CreatedAt = new DateTime(2022, 3, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4375),
                            CreatedBy = "6b14cd00-59f0-4422-bfce-07c080829987",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 10,
                            ReservationDate = new DateTime(2022, 5, 11, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4374),
                            ReservationName = "ReservationName_16"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596317"),
                            CreatedAt = new DateTime(2022, 9, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4381),
                            CreatedBy = "6b14cd00-59f0-4422-bfce-07c080829987",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 5,
                            ReservationDate = new DateTime(2022, 10, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4379),
                            ReservationName = "ReservationName_17"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596327"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4386),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 3,
                            ReservationDate = new DateTime(2022, 6, 30, 13, 45, 30, 292, DateTimeKind.Local).AddTicks(4385),
                            ReservationName = "ReservationName_27"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596328"),
                            CreatedAt = new DateTime(2022, 6, 30, 14, 45, 30, 292, DateTimeKind.Local).AddTicks(4392),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 6,
                            ReservationDate = new DateTime(2022, 6, 30, 16, 45, 30, 292, DateTimeKind.Local).AddTicks(4391),
                            ReservationName = "ReservationName_28"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596329"),
                            CreatedAt = new DateTime(2022, 6, 16, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4397),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 4,
                            ReservationDate = new DateTime(2022, 7, 1, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4396),
                            ReservationName = "ReservationName_29"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596330"),
                            CreatedAt = new DateTime(2022, 8, 24, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4404),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 3,
                            ReservationDate = new DateTime(2025, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4402),
                            ReservationName = "ReservationName_30"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596331"),
                            CreatedAt = new DateTime(2022, 6, 30, 11, 0, 30, 292, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 9,
                            ReservationDate = new DateTime(2035, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4408),
                            ReservationName = "ReservationName_31"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596332"),
                            CreatedAt = new DateTime(2022, 6, 27, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4414),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 14,
                            ReservationDate = new DateTime(2022, 6, 30, 7, 45, 30, 292, DateTimeKind.Local).AddTicks(4413),
                            ReservationName = "ReservationName_32"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596333"),
                            CreatedAt = new DateTime(2022, 5, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4420),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 8,
                            ReservationDate = new DateTime(2022, 6, 20, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4418),
                            ReservationName = "ReservationName_33"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596334"),
                            CreatedAt = new DateTime(2022, 4, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4425),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 10,
                            ReservationDate = new DateTime(2022, 5, 18, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4424),
                            ReservationName = "ReservationName_34"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596335"),
                            CreatedAt = new DateTime(2022, 8, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4431),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 5,
                            ReservationDate = new DateTime(2022, 9, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4429),
                            ReservationName = "ReservationName_35"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596336"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4436),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 4,
                            ReservationDate = new DateTime(2022, 6, 30, 11, 45, 30, 292, DateTimeKind.Local).AddTicks(4435),
                            ReservationName = "ReservationName_36"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596337"),
                            CreatedAt = new DateTime(2022, 6, 30, 12, 45, 30, 292, DateTimeKind.Local).AddTicks(4442),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 5,
                            ReservationDate = new DateTime(2022, 6, 30, 14, 45, 30, 292, DateTimeKind.Local).AddTicks(4441),
                            ReservationName = "ReservationName_37"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596338"),
                            CreatedAt = new DateTime(2022, 6, 16, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4463),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 6,
                            ReservationDate = new DateTime(2022, 7, 5, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4462),
                            ReservationName = "ReservationName_38"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596339"),
                            CreatedAt = new DateTime(2022, 7, 20, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4470),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 7,
                            ReservationDate = new DateTime(2024, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4468),
                            ReservationName = "ReservationName_39"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596340"),
                            CreatedAt = new DateTime(2022, 6, 30, 11, 28, 30, 292, DateTimeKind.Local).AddTicks(4476),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 10,
                            ReservationDate = new DateTime(2032, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4474),
                            ReservationName = "ReservationName_40"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596341"),
                            CreatedAt = new DateTime(2022, 6, 25, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4481),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 17,
                            ReservationDate = new DateTime(2022, 6, 29, 22, 45, 30, 292, DateTimeKind.Local).AddTicks(4480),
                            ReservationName = "ReservationName_41"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596342"),
                            CreatedAt = new DateTime(2022, 5, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4486),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 4,
                            ReservationDate = new DateTime(2022, 6, 23, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4485),
                            ReservationName = "ReservationName_42"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596343"),
                            CreatedAt = new DateTime(2022, 7, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4492),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 11,
                            ReservationDate = new DateTime(2022, 8, 12, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4491),
                            ReservationName = "ReservationName_43"
                        },
                        new
                        {
                            ReservationId = new Guid("acbf657b-3398-7a73-8746-77b7cf596344"),
                            CreatedAt = new DateTime(2022, 8, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4498),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfDiners = 2,
                            ReservationDate = new DateTime(2022, 9, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(4496),
                            ReservationName = "ReservationName_44"
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Section", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("HasSubSection")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("SectionId");

                    b.HasIndex("MenuId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.SectionDish", b =>
                {
                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SectionId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("SectionDishes");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.SectionProduct", b =>
                {
                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SectionId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SectionProducts");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Specification", b =>
                {
                    b.Property<Guid>("SpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecificationId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.SubSection", b =>
                {
                    b.Property<Guid>("SubSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubSectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("SubSections");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.SubSectionDish", b =>
                {
                    b.Property<Guid>("SubSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubSectionId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("SubSectionDishes");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.SubSectionProduct", b =>
                {
                    b.Property<Guid>("SubSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubSectionId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SubSectionProducts");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Table", b =>
                {
                    b.Property<Guid>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.Property<short>("TableState")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TableId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = new Guid("44aecd78-59bb-7504-bfff-07c07129ab00"),
                            Capacity = 4,
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(8978),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = 1,
                            TableState = (short)0,
                            ZoneId = new Guid("32bccd11-59fd-3304-bfaa-07c08082abc0")
                        },
                        new
                        {
                            TableId = new Guid("44aecd78-59bb-7504-bfff-07c07129ab01"),
                            Capacity = 6,
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(9346),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = 2,
                            TableState = (short)0,
                            ZoneId = new Guid("32bccd11-59fd-3304-bfaa-07c08082abc1")
                        },
                        new
                        {
                            TableId = new Guid("44aecd78-59bb-7504-bfff-07c07129ab02"),
                            Capacity = 4,
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(9365),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = 4,
                            TableState = (short)0,
                            ZoneId = new Guid("32bccd11-59fd-3304-bfaa-07c08082abc2")
                        },
                        new
                        {
                            TableId = new Guid("44aecd78-59bb-7504-bfff-07c07129ab03"),
                            Capacity = 3,
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(9369),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = 5,
                            TableState = (short)0,
                            ZoneId = new Guid("32bccd11-59fd-3304-bfaa-07c08082abc3")
                        },
                        new
                        {
                            TableId = new Guid("44aecd78-59bb-7504-bfff-07c07129aba2"),
                            Capacity = 5,
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(9373),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = 1,
                            TableState = (short)0,
                            ZoneId = new Guid("32bccd11-59fd-33ff-bfaa-07c08082aba1")
                        },
                        new
                        {
                            TableId = new Guid("44aecd78-59bb-7504-bfff-07c07129aba3"),
                            Capacity = 3,
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(9376),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = 2,
                            TableState = (short)0,
                            ZoneId = new Guid("32bccd11-59fd-33ff-bfaa-07c08082aba2")
                        },
                        new
                        {
                            TableId = new Guid("b006e2c5-5b8e-4584-8021-3cecd76c9ca6"),
                            Capacity = 6,
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(9380),
                            CreatedBy = "64fed988-6f68-49dc-ad54-0da50ec02319",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = 1,
                            TableState = (short)0,
                            ZoneId = new Guid("f60d55e2-4e54-4896-9632-98d36d7680c3")
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Zone", b =>
                {
                    b.Property<Guid>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FoodBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZoneTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneId");

                    b.HasIndex("FoodBusinessId");

                    b.ToTable("Zones");

                    b.HasData(
                        new
                        {
                            ZoneId = new Guid("32bccd11-59fd-3304-bfaa-07c08082abc0"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(7177),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneTitle = "TajMhal VIP Zone"
                        },
                        new
                        {
                            ZoneId = new Guid("32bccd11-59fd-3304-bfaa-07c08082abc1"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(7560),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneTitle = "TajMhal FAMILY Zone"
                        },
                        new
                        {
                            ZoneId = new Guid("32bccd11-59fd-3304-bfaa-07c08082abc2"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(7578),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneTitle = "TajMhal NORMAL Zone"
                        },
                        new
                        {
                            ZoneId = new Guid("32bccd11-59fd-3304-bfaa-07c08082abc3"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(7584),
                            CreatedBy = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            FoodBusinessId = new Guid("3cbf3570-4444-4673-8746-29b7cf568093"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneTitle = "TajMhal OUTDOOR Zone"
                        },
                        new
                        {
                            ZoneId = new Guid("32bccd11-59fd-33ff-bfaa-07c08082aba1"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(7589),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneTitle = "Mcdonald NORMAL Zone"
                        },
                        new
                        {
                            ZoneId = new Guid("32bccd11-59fd-33ff-bfaa-07c08082aba2"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(7594),
                            CreatedBy = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            FoodBusinessId = new Guid("66bf3570-440d-4673-8746-29b7cf568099"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneTitle = "Mcdonald OUTDOOR Zone"
                        },
                        new
                        {
                            ZoneId = new Guid("f60d55e2-4e54-4896-9632-98d36d7680c3"),
                            CreatedAt = new DateTime(2022, 6, 30, 10, 45, 30, 292, DateTimeKind.Local).AddTicks(7598),
                            CreatedBy = "64fed988-6f68-49dc-ad54-0da50ec02319",
                            FoodBusinessId = new Guid("88bc7853-220f-9173-3246-afb7cf595022"),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneTitle = "BigMama SHARED Zone"
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Dish", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.FoodBusiness", "FoodBusiness")
                        .WithMany()
                        .HasForeignKey("FoodBusinessId");

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("DishId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DishId");

                            b1.ToTable("Dishes");

                            b1.WithOwner()
                                .HasForeignKey("DishId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.DishComboBoxItemTranslation", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.DishSpecification", null)
                        .WithMany("ComboBoxContentTranslation")
                        .HasForeignKey("DishSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("DishComboBoxItemTranslationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DishComboBoxItemTranslationId");

                            b1.ToTable("DishComboBoxItemTranslations");

                            b1.WithOwner()
                                .HasForeignKey("DishComboBoxItemTranslationId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.DishIngredient", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Dish", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRestaurant.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("Dishes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.DishSpecification", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Dish", null)
                        .WithMany("Specifications")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("DishSpecificationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DishSpecificationId");

                            b1.ToTable("DishSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DishSpecificationId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.DishSupplement", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Dish", "Dish")
                        .WithMany("Supplements")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRestaurant.Domain.Entities.Dish", "Supplement")
                        .WithMany()
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.FoodBusiness", b =>
                {
                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("FoodBusinessId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FoodBusinessId");

                            b1.ToTable("FoodBusinesses");

                            b1.WithOwner()
                                .HasForeignKey("FoodBusinessId");

                            b1.OwnsOne("SmartRestaurant.Domain.ValueObjects.GeoPosition", "GeoPosition", b2 =>
                                {
                                    b2.Property<Guid>("AddressFoodBusinessId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Latitude")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Longitude")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AddressFoodBusinessId");

                                    b2.ToTable("FoodBusinesses");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressFoodBusinessId");
                                });
                        });

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.CommissionConfigs", "CommissionConfigs", b1 =>
                        {
                            b1.Property<Guid>("FoodBusinessId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.Property<int>("WhoPay")
                                .HasColumnType("int");

                            b1.HasKey("FoodBusinessId");

                            b1.ToTable("FoodBusinesses");

                            b1.WithOwner()
                                .HasForeignKey("FoodBusinessId");
                        });

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("FoodBusinessId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("CountryCode")
                                .HasColumnType("int");

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.HasKey("FoodBusinessId");

                            b1.ToTable("FoodBusinesses");

                            b1.WithOwner()
                                .HasForeignKey("FoodBusinessId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.FoodBusinessClient", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.FoodBusiness", "FoodBusiness")
                        .WithMany()
                        .HasForeignKey("FoodBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("FoodBusinessClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FoodBusinessClientId");

                            b1.ToTable("FoodBusinessClients");

                            b1.WithOwner()
                                .HasForeignKey("FoodBusinessClientId");

                            b1.OwnsOne("SmartRestaurant.Domain.ValueObjects.GeoPosition", "GeoPosition", b2 =>
                                {
                                    b2.Property<Guid>("AddressFoodBusinessClientId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Latitude")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Longitude")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AddressFoodBusinessClientId");

                                    b2.ToTable("FoodBusinessClients");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressFoodBusinessClientId");
                                });
                        });

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("FoodBusinessClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("CountryCode")
                                .HasColumnType("int");

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.HasKey("FoodBusinessClientId");

                            b1.ToTable("FoodBusinessClients");

                            b1.WithOwner()
                                .HasForeignKey("FoodBusinessClientId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.FoodBusinessUser", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.FoodBusiness", "FoodBusiness")
                        .WithMany()
                        .HasForeignKey("FoodBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Illness", b =>
                {
                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("IllnessId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IllnessId");

                            b1.ToTable("Illnesses");

                            b1.WithOwner()
                                .HasForeignKey("IllnessId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Ingredient", b =>
                {
                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.EnergeticValue", "EnergeticValue", b1 =>
                        {
                            b1.Property<Guid>("IngredientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("Amount")
                                .HasColumnType("real");

                            b1.Property<float>("Carbohydrates")
                                .HasColumnType("real");

                            b1.Property<float>("Energy")
                                .HasColumnType("real");

                            b1.Property<float>("Fat")
                                .HasColumnType("real");

                            b1.Property<int>("MeasurementUnit")
                                .HasColumnType("int");

                            b1.Property<float>("Protein")
                                .HasColumnType("real");

                            b1.HasKey("IngredientId");

                            b1.ToTable("Ingredients");

                            b1.WithOwner()
                                .HasForeignKey("IngredientId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.IngredientIllness", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Illness", "Illness")
                        .WithMany("IngredientIllnesses")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRestaurant.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientIllnesses")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.LinkedDevice", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.FoodBusiness", "FoodBusiness")
                        .WithMany()
                        .HasForeignKey("FoodBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.MonthlyCommission", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.FoodBusiness", "FoodBusiness")
                        .WithMany()
                        .HasForeignKey("FoodBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.CommissionConfigs", "CommissionConfigs", b1 =>
                        {
                            b1.Property<Guid>("MonthlyCommissionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.Property<int>("WhoPay")
                                .HasColumnType("int");

                            b1.HasKey("MonthlyCommissionId");

                            b1.ToTable("MonthlyCommission");

                            b1.WithOwner()
                                .HasForeignKey("MonthlyCommissionId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Order", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.FoodBusinessClient", "FoodBusinessClient")
                        .WithMany()
                        .HasForeignKey("FoodBusinessClientId");

                    b.HasOne("SmartRestaurant.Domain.Entities.FoodBusiness", "FoodBusiness")
                        .WithMany()
                        .HasForeignKey("FoodBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.CommissionConfigs", "CommissionConfigs", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.Property<int>("WhoPay")
                                .HasColumnType("int");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.TakeoutDetails", "TakeoutDetails", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("DeliveryTime")
                                .HasColumnType("datetime2");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderComboBoxItemTranslation", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.OrderDishSpecification", null)
                        .WithMany("ComboBoxContentTranslation")
                        .HasForeignKey("OrderDishSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("OrderComboBoxItemTranslationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderComboBoxItemTranslationId");

                            b1.ToTable("OrderComboBoxItemTranslations");

                            b1.WithOwner()
                                .HasForeignKey("OrderComboBoxItemTranslationId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderDish", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Order", null)
                        .WithMany("Dishes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("OrderDishId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderDishId");

                            b1.ToTable("OrderDishes");

                            b1.WithOwner()
                                .HasForeignKey("OrderDishId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderDishIngredient", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.OrderDish", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("OrderDishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.OrderIngredient", "OrderIngredient", b1 =>
                        {
                            b1.Property<Guid>("OrderDishIngredientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("IngredientId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Names")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderDishIngredientId");

                            b1.ToTable("OrderDishIngredients");

                            b1.WithOwner()
                                .HasForeignKey("OrderDishIngredientId");

                            b1.OwnsOne("SmartRestaurant.Domain.ValueObjects.EnergeticValue", "EnergeticValue", b2 =>
                                {
                                    b2.Property<Guid>("OrderIngredientOrderDishIngredientId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<float>("Amount")
                                        .HasColumnType("real");

                                    b2.Property<float>("Carbohydrates")
                                        .HasColumnType("real");

                                    b2.Property<float>("Energy")
                                        .HasColumnType("real");

                                    b2.Property<float>("Fat")
                                        .HasColumnType("real");

                                    b2.Property<int>("MeasurementUnit")
                                        .HasColumnType("int");

                                    b2.Property<float>("Protein")
                                        .HasColumnType("real");

                                    b2.HasKey("OrderIngredientOrderDishIngredientId");

                                    b2.ToTable("OrderDishIngredients");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderIngredientOrderDishIngredientId");
                                });
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderDishSpecification", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.OrderDish", null)
                        .WithMany("Specifications")
                        .HasForeignKey("OrderDishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("OrderDishSpecificationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderDishSpecificationId");

                            b1.ToTable("OrderDishSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OrderDishSpecificationId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderDishSupplement", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.OrderDish", null)
                        .WithMany("Supplements")
                        .HasForeignKey("OrderDishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("OrderDishSupplementId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderDishSupplementId");

                            b1.ToTable("OrderDishSupplements");

                            b1.WithOwner()
                                .HasForeignKey("OrderDishSupplementId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderOccupiedTable", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Order", null)
                        .WithMany("OccupiedTables")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("OrderProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderProductId");

                            b1.ToTable("OrderProducts");

                            b1.WithOwner()
                                .HasForeignKey("OrderProductId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Product", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.FoodBusiness", "FoodBusiness")
                        .WithMany()
                        .HasForeignKey("FoodBusinessId");

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.FoodBusiness", "FoodBusiness")
                        .WithMany()
                        .HasForeignKey("FoodBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Section", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Menu", "Menu")
                        .WithMany("Sections")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("SectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SectionId");

                            b1.ToTable("Sections");

                            b1.WithOwner()
                                .HasForeignKey("SectionId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.SectionDish", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Dish", "Dish")
                        .WithMany("Sections")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRestaurant.Domain.Entities.Section", null)
                        .WithMany("Dishes")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.SectionProduct", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Product", "Product")
                        .WithMany("Sections")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRestaurant.Domain.Entities.Section", null)
                        .WithMany("Products")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.SubSection", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Section", "Section")
                        .WithMany("SubSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("SubSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SubSectionId");

                            b1.ToTable("SubSections");

                            b1.WithOwner()
                                .HasForeignKey("SubSectionId");
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.SubSectionDish", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Dish", "Dish")
                        .WithMany("SubSections")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRestaurant.Domain.Entities.SubSection", null)
                        .WithMany("Dishes")
                        .HasForeignKey("SubSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.SubSectionProduct", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Product", "Product")
                        .WithMany("SubSections")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRestaurant.Domain.Entities.SubSection", null)
                        .WithMany("Products")
                        .HasForeignKey("SubSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Table", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.Zone", null)
                        .WithMany("Tables")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.Zone", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Entities.FoodBusiness", "FoodBusiness")
                        .WithMany()
                        .HasForeignKey("FoodBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartRestaurant.Domain.ValueObjects.Names", "Names", b1 =>
                        {
                            b1.Property<Guid>("ZoneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RU")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TR")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ZoneId");

                            b1.ToTable("Zones");

                            b1.WithOwner()
                                .HasForeignKey("ZoneId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
