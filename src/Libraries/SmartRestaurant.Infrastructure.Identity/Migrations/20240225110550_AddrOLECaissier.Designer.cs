// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartRestaurant.Infrastructure.Identity.Persistence;

namespace SmartRestaurant.Infrastructure.Identity.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20240225110550_AddrOLECaissier")]
    partial class AddrOLECaissier
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Identity.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "88f0dec2-5364-4881-4817-1f2a135a8641",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "20",
                            ConcurrencyStamp = "1933aad7-120c-414f-a575-5681df13732f",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "24",
                            ConcurrencyStamp = "b9182488-5482-4051-af9d-5fea22182944",
                            Name = "GestionnaireVente",
                            NormalizedName = "GESTIONNAIREVENTE"
                        },
                        new
                        {
                            Id = "23",
                            ConcurrencyStamp = "6f3d452f-28a5-42be-b474-716985d97820",
                            Name = "GestionnaireStock",
                            NormalizedName = "GESTIONNAIRESTOCK"
                        },
                        new
                        {
                            Id = "25",
                            ConcurrencyStamp = "5050daa0-8870-4450-8004-23d11aa0cc4a",
                            Name = "GestionnaireAchat",
                            NormalizedName = "GESTIONNAIREACHAT"
                        },
                        new
                        {
                            Id = "22",
                            ConcurrencyStamp = "0c845a63-6573-488a-9c89-a50484707e88",
                            Name = "CaissierFacturier",
                            NormalizedName = "CAISSIERFACTURIER"
                        },
                        new
                        {
                            Id = "21",
                            ConcurrencyStamp = "27dcec7a-0048-4e46-9cf5-292a4a59c171",
                            Name = "Caissier",
                            NormalizedName = "CAISSIER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "emec7115-422c-487d-65b0-58cfa8e66a94",
                            Name = "SupportAgent",
                            NormalizedName = "SUPPORTAGENT"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "emrc7115-422c-487d-75b0-58cfa8e66a94",
                            Name = "SalesMan",
                            NormalizedName = "SALESMAN"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "emtc7115-422c-487d-85b0-58cfa8e66a94",
                            Name = "Photograph",
                            NormalizedName = "PHOTOGRAPH"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "5719c2b8-22fd-4eee-9c21-4bfbd2ce18d2",
                            Name = "FoodBusinessAdministrator",
                            NormalizedName = "FOODBUSINESSADMINISTRATOR"
                        },
                        new
                        {
                            Id = "6",
                            ConcurrencyStamp = "emcc7115-422c-487d-95b0-58cfa8e66a94",
                            Name = "FoodBusinessManager",
                            NormalizedName = "FOODBUSINESSMANAGER"
                        },
                        new
                        {
                            Id = "7",
                            ConcurrencyStamp = "emcb7115-422c-487d-95c0-58cfa8m66a94",
                            Name = "FoodBusinessOwner",
                            NormalizedName = "FOODBUSINESSOWNER"
                        },
                        new
                        {
                            Id = "9",
                            ConcurrencyStamp = "encc7115-422c-487d-95b0-58cfa8e66a95",
                            Name = "Cashier",
                            NormalizedName = "CASHIER"
                        },
                        new
                        {
                            Id = "8",
                            ConcurrencyStamp = "elcc7115-422c-487d-95b0-58cfa8e66a96",
                            Name = "Chef",
                            NormalizedName = "CHEF"
                        },
                        new
                        {
                            Id = "10",
                            ConcurrencyStamp = "ekcc7115-422c-487d-95b0-58cfa8e66a97",
                            Name = "Waiter",
                            NormalizedName = "WAITER"
                        },
                        new
                        {
                            Id = "11",
                            ConcurrencyStamp = "edcc7115-422c-487d-95b0-58cfa8e66a98",
                            Name = "Diner",
                            NormalizedName = "DINER"
                        },
                        new
                        {
                            Id = "12",
                            ConcurrencyStamp = "educ7115-422c-487d-25b0-58cfa8e66a98",
                            Name = "Anounymous",
                            NormalizedName = "ANOUNYMOUS"
                        },
                        new
                        {
                            Id = "13",
                            ConcurrencyStamp = "edpc7115-422c-487d-15b0-58cfa8e66a98",
                            Name = "Organization",
                            NormalizedName = "ORGANIZATION"
                        },
                        new
                        {
                            Id = "14",
                            ConcurrencyStamp = "edpc7115-422c-487d-15b0-58cfa8e66a98",
                            Name = "HotelManager",
                            NormalizedName = "HOTELMANAGER"
                        },
                        new
                        {
                            Id = "15",
                            ConcurrencyStamp = "edpc7115-422c-487d-15b0-58cfa8e66a98",
                            Name = "HotelReceptionist",
                            NormalizedName = "HOTELRECEPTIONIST"
                        },
                        new
                        {
                            Id = "16",
                            ConcurrencyStamp = "edpc7115-422c-487d-15b0-58cfa8e66a98",
                            Name = "HotelServiceAdmin",
                            NormalizedName = "HOTELSERVICEADMIN"
                        },
                        new
                        {
                            Id = "17",
                            ConcurrencyStamp = "edpc7115-422c-487d-15b0-58cfa8e66a98",
                            Name = "HotelClient",
                            NormalizedName = "HOTELCLIENT"
                        },
                        new
                        {
                            Id = "18",
                            ConcurrencyStamp = "270b4553-f9b8-48e0-b244-af2ce4bc5ca9",
                            Name = "HotelServiceTechnique",
                            NormalizedName = "HOTELSERVICETECHNIQUE"
                        },
                        new
                        {
                            Id = "19",
                            ConcurrencyStamp = "2622be83-085c-4339-ae68-ffa9d5cd2fa8",
                            Name = "HouseKeeping",
                            NormalizedName = "HOUSEKEEPING"
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Identity.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShowPhoneNumberInOdoo")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3cbf3570-0d44-4673-8746-29b7cf568093",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a276898f-0be7-474d-8f0f-016c0e904d50",
                            Email = "admin@easystock.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@EASYSTOCK.COM",
                            NormalizedUserName = "admin@EASYSTOCK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAzFpmzMtMiw0wHV6b0aUzFLF9Pw7B2u+DswRHttAU2nH22NHBsc/hSSvKUqmRWGZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73c55bf1-7ed6-4708-aa62-78355092e2fe",
                            TwoFactorEnabled = false,
                            UserName = "admin@easystock.com"
                        },
                        new
                        {
                            Id = "d466ef00-61f1-4e77-801a-b016f0f12323",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b49e213e-a89e-498c-a7f2-84fc71a4d533",
                            Email = "SupportAgent@SmartRestaurant.io",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPPORTAGENT@SMARTRESTAURANT.IO",
                            NormalizedUserName = "SUPPORTAGENT@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df91be97-03b9-4ced-b744-46600318bd79",
                            TwoFactorEnabled = false,
                            UserName = "SupportAgent@SmartRestaurant.io"
                        },
                        new
                        {
                            Id = "d466ef00-61f1-4e77-801a-b516f0f12323",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "564e5eeb-00bf-4f88-aae2-b958a97e6acc",
                            Email = "Waiter@SmartRestaurant.io",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WAITER@SMARTRESTAURANT.IO",
                            NormalizedUserName = "WAITER@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44cdb1f6-5334-4b76-9b9f-35fdef6ed9ca",
                            TwoFactorEnabled = false,
                            UserName = "Waiter@SmartRestaurant.io"
                        },
                        new
                        {
                            Id = "3cbf3570-4444-4444-8746-29b7cf568093",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb4fae67-a506-488a-bc7d-60a9ba8e8fbf",
                            Email = "FoodAdmin@SmartRestaurant.io",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FOODADMIN@SMARTRESTAURANT.IO",
                            NormalizedUserName = "FOODADMIN@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "492e6338-da17-4c61-bd4a-ca2f70f9846f",
                            TwoFactorEnabled = false,
                            UserName = "FoodAdmin@SmartRestaurant.io"
                        },
                        new
                        {
                            Id = "44bf3570-0d44-4673-8746-29b7cf568088",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc373fd6-87ff-4b15-84a2-bcd30820aef1",
                            Email = "McdonaldFoodAdmin@SmartRestaurant.io",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCDONALDFOODADMIN@SMARTRESTAURANT.IO",
                            NormalizedUserName = "MCDONALDFOODADMIN@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef9af9c0-13df-4b9b-8cfc-9f2a011fab7f",
                            TwoFactorEnabled = false,
                            UserName = "McdonaldFoodAdmin@SmartRestaurant.io"
                        },
                        new
                        {
                            Id = "08a1a626-7f8e-4b51-84fc-fc51b6302cca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a370bf3a-1985-4d36-9848-7fd2342404d9",
                            Email = "BigMamaFoodBusinessAdministrator@SmartRestaurant.io",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BIGMAMAFOODBUSINESSADMINISTRATOR@SMARTRESTAURANT.IO",
                            NormalizedUserName = "BIGMAMAFOODBUSINESSADMINISTRATOR@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d61559ec-a187-4e0a-b5c2-9d9f9a74ac36",
                            TwoFactorEnabled = false,
                            UserName = "BigMamaFoodBusinessAdministrator@SmartRestaurant.io"
                        },
                        new
                        {
                            Id = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0431bf57-fa52-4b7e-88c8-4fe5f5d8f1f5",
                            Email = "TajMhalFoodBusinessManager@SmartRestaurant.io",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TAJMHALFOODBUSINESSMANAGER@SMARTRESTAURANT.IO",
                            NormalizedUserName = "TAJMHALFOODBUSINESSMANAGER@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsuHVzJHLS9jP+mo+zCHk22BZphE5WRR+o2C6Ct4Ektv8zW9DXj1nogD2OdNBjWPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f7a93de-84ab-4883-a6cc-84e9fcc9d549",
                            TwoFactorEnabled = false,
                            UserName = "TajMhalFoodBusinessManager@SmartRestaurant.io"
                        },
                        new
                        {
                            Id = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65aa85cf-bc58-4605-82a6-462d423f76b7",
                            Email = "McdonaldFoodBusinessManager@SmartRestaurant.io",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCDONALDFOODBUSINESSMANAGER@SMARTRESTAURANT.IO",
                            NormalizedUserName = "MCDONALDFOODBUSINESSMANAGER@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsuHVzJHLS9jP+mo+zCHk22BZphE5WRR+o2C6Ct4Ektv8zW9DXj1nogD2OdNBjWPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9f1d266-4986-44aa-8110-577af20423b0",
                            TwoFactorEnabled = false,
                            UserName = "McdonaldFoodBusinessManager@SmartRestaurant.io"
                        },
                        new
                        {
                            Id = "64fed988-6f68-49dc-ad54-0da50ec02319",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84f2114e-5d76-48d5-86f3-f5ce454fbe14",
                            Email = "BigMamaSalimFoodBusinessManager@SmartRestaurant.io",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BIGMAMASALIMFOODBUSINESSMANAGER@SMARTRESTAURANT.IO",
                            NormalizedUserName = "BIGMAMASALIMFOODBUSINESSMANAGER@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEO+ouwzSOa+AsCNZrVEhO6Su9q/fX/Q9c9havEvhs5QtXWA6tRdfmqOlemUQphqDnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c87dd21-f2d7-4b99-ba6e-9d8a5cc2a21f",
                            TwoFactorEnabled = false,
                            UserName = "BigMamaSalimFoodBusinessManager@SmartRestaurant.io"
                        },
                        new
                        {
                            Id = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0581a114-9cc8-44fe-aa45-d5f6ab721715",
                            Email = "Diner_01@SmartRestaurant.io",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DINER_01@SMARTRESTAURANT.IO",
                            NormalizedUserName = "DINER_01@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEJFZbbuBIpvoyXKwrceuNsU4cXZ18LLAl8g7s48Pye4EAEXwA2hswtnLMhMS9Q7Cjw ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14e40536-940c-420a-aecf-e833b77b5678",
                            TwoFactorEnabled = false,
                            UserName = "Diner_01@SmartRestaurant.io"
                        },
                        new
                        {
                            Id = "6b14cd00-59f0-4422-bfce-07c080829987",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c08ae075-8722-4e4b-bde4-5cfc8ca2f379",
                            Email = "Diner_02@SmartRestaurant.io",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DINER_02@SMARTRESTAURANT.IO",
                            NormalizedUserName = "DINER_02@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEJFZbbuBIpvoyXKwrceuNsU4cXZ18LLAl8g7s48Pye4EAEXwA2hswtnLMhMS9Q7Cjw ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c71dccb1-905a-4aae-a957-617489cd9f4e",
                            TwoFactorEnabled = false,
                            UserName = "Diner_02@SmartRestaurant.io"
                        },
                        new
                        {
                            Id = "a3dbd500-eab0-4233-86fd-7f1a4195f9a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab81c93a-9d3d-46e1-861c-385b8bdaaf7e",
                            Email = "manager@sonatrach.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@SONATRACH.COM",
                            NormalizedUserName = "MANAGER@SONATRACH.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2c4197d-2719-42be-90b0-0fd61d8b7fcb",
                            TwoFactorEnabled = false,
                            UserName = "manager@sonatrach.com"
                        },
                        new
                        {
                            Id = "ba89dc5f-dfd1-4c87-9372-233c611cc756",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "767eae63-86b1-4d67-b721-8d7a17768362",
                            Email = "manager@cevital.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@CEVITAL.COM",
                            NormalizedUserName = "MANAGER@CEVITAL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d973f1a-a82f-43b6-927e-f6e60b9cac3b",
                            TwoFactorEnabled = false,
                            UserName = "manager@cevital.com"
                        },
                        new
                        {
                            Id = "6d215fd5-e7b4-4afd-aa6c-334a37d3874d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f066fd8-6bc5-4c62-a371-7c0d03605801",
                            Email = "HotelManager@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOTELMANAGER@GMAIL.COM",
                            NormalizedUserName = "HOTELMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsuHVzJHLS9jP+mo+zCHk22BZphE5WRR+o2C6Ct4Ektv8zW9DXj1nogD2OdNBjWPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b3063cc-fd15-4e32-9935-6b3ba1cbf9dd",
                            TwoFactorEnabled = false,
                            UserName = "HotelManager@gmail.com"
                        },
                        new
                        {
                            Id = "83e72357-25b8-4e2a-8728-3e25365608e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1fa1ae3-676f-464b-8c04-431cdf40b11d",
                            Email = "HotelReceptionist@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOTELRECEPTIONIST@GMAIL.COM",
                            NormalizedUserName = "HOTELRECEPTIONIST@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsuHVzJHLS9jP+mo+zCHk22BZphE5WRR+o2C6Ct4Ektv8zW9DXj1nogD2OdNBjWPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a26ebfc-4c66-45ce-bd5b-f99aa35f8b55",
                            TwoFactorEnabled = false,
                            UserName = "HotelReceptionist@gmail.com"
                        },
                        new
                        {
                            Id = "C4EAACBE-A5C5-47E8-8DED-508709D7A50F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00b90009-d21a-4c7b-aabc-779bc12a82a9",
                            Email = "HotelServiceAdmin@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOTELSERVICEADMIN@GMAIL.COM",
                            NormalizedUserName = "HOTELSERVICEADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsuHVzJHLS9jP+mo+zCHk22BZphE5WRR+o2C6Ct4Ektv8zW9DXj1nogD2OdNBjWPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3922ef86-b07d-4d06-9c6d-230e6dccbae9",
                            TwoFactorEnabled = false,
                            UserName = "HotelServiceAdmin@gmail.com"
                        },
                        new
                        {
                            Id = "FB8EC84D-3A8F-4FC6-B21E-7141B48A164D",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c4386d8-6b26-4096-acae-2edfdb7e5bfb",
                            Email = "ClientHotel@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTHOTEL@GMAIL.COM",
                            NormalizedUserName = "CLIENTHOTEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsuHVzJHLS9jP+mo+zCHk22BZphE5WRR+o2C6Ct4Ektv8zW9DXj1nogD2OdNBjWPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cba9a52-b14c-440e-a144-36be7b2d8059",
                            TwoFactorEnabled = false,
                            UserName = "ClientHotel@gmail.com"
                        },
                        new
                        {
                            Id = "acd04fc6-99da-436f-a011-191b7e92aa23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef892423-b943-4971-8035-7b75ab4f01ce",
                            Email = "HotelServiceTechnique@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOTELSERVICETECHNIQUE@GMAIL.COM",
                            NormalizedUserName = "HOTELSERVICETECHNIQUE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsuHVzJHLS9jP+mo+zCHk22BZphE5WRR+o2C6Ct4Ektv8zW9DXj1nogD2OdNBjWPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1cbcf090-2c46-4c64-a931-a94c6d151cca",
                            TwoFactorEnabled = false,
                            UserName = "HotelServiceTechnique@gmail.com"
                        },
                        new
                        {
                            Id = "7d33ae49-68a8-4c10-bc57-b09da6f9f016",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdfa3c8f-dfc3-4b44-b9fe-ff7838d1ffe3",
                            Email = "HotelMaid@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsShowPhoneNumberInOdoo = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOTELMAID@GMAIL.COM",
                            NormalizedUserName = "HOTELMAID@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsuHVzJHLS9jP+mo+zCHk22BZphE5WRR+o2C6Ct4Ektv8zW9DXj1nogD2OdNBjWPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2053991b-12fc-4b23-b7d1-91b30257c838",
                            TwoFactorEnabled = false,
                            UserName = "HotelMaid@gmail.com"
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Identity.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3cbf3570-0d44-4673-8746-29b7cf568093",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "d466ef00-61f1-4e77-801a-b016f0f12323",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "d466ef00-61f1-4e77-801a-b516f0f12323",
                            RoleId = "10"
                        },
                        new
                        {
                            UserId = "3cbf3570-4444-4444-8746-29b7cf568093",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "44bf3570-0d44-4673-8746-29b7cf568088",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "08a1a626-7f8e-4b51-84fc-fc51b6302cca",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "64fed988-6f68-49dc-ad54-0da50ec02319",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            RoleId = "11"
                        },
                        new
                        {
                            UserId = "6b14cd00-59f0-4422-bfce-07c080829987",
                            RoleId = "11"
                        },
                        new
                        {
                            UserId = "6d215fd5-e7b4-4afd-aa6c-334a37d3874d",
                            RoleId = "14"
                        },
                        new
                        {
                            UserId = "83e72357-25b8-4e2a-8728-3e25365608e2",
                            RoleId = "15"
                        },
                        new
                        {
                            UserId = "C4EAACBE-A5C5-47E8-8DED-508709D7A50F",
                            RoleId = "16"
                        },
                        new
                        {
                            UserId = "FB8EC84D-3A8F-4FC6-B21E-7141B48A164D",
                            RoleId = "17"
                        },
                        new
                        {
                            UserId = "acd04fc6-99da-436f-a011-191b7e92aa23",
                            RoleId = "18"
                        },
                        new
                        {
                            UserId = "7d33ae49-68a8-4c10-bc57-b09da6f9f016",
                            RoleId = "19"
                        },
                        new
                        {
                            UserId = "ba89dc5f-dfd1-4c87-9372-233c611cc756",
                            RoleId = "13"
                        },
                        new
                        {
                            UserId = "a3dbd500-eab0-4233-86fd-7f1a4195f9a9",
                            RoleId = "13"
                        });
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Identity.Entities.Permissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ba")
                        .HasColumnType("bit");

                    b.Property<bool>("Bca")
                        .HasColumnType("bit");

                    b.Property<bool>("Bcv")
                        .HasColumnType("bit");

                    b.Property<bool>("Bl")
                        .HasColumnType("bit");

                    b.Property<bool>("Clients")
                        .HasColumnType("bit");

                    b.Property<bool>("CreancesAss")
                        .HasColumnType("bit");

                    b.Property<bool>("Fac")
                        .HasColumnType("bit");

                    b.Property<bool>("FacAvoir")
                        .HasColumnType("bit");

                    b.Property<bool>("Facpro")
                        .HasColumnType("bit");

                    b.Property<bool>("Familles")
                        .HasColumnType("bit");

                    b.Property<bool>("Fournisseurs")
                        .HasColumnType("bit");

                    b.Property<bool>("Gda")
                        .HasColumnType("bit");

                    b.Property<bool>("Gde")
                        .HasColumnType("bit");

                    b.Property<bool>("Gds")
                        .HasColumnType("bit");

                    b.Property<bool>("Gdv")
                        .HasColumnType("bit");

                    b.Property<bool>("Inventaires")
                        .HasColumnType("bit");

                    b.Property<bool>("Inviter")
                        .HasColumnType("bit");

                    b.Property<bool>("Marques")
                        .HasColumnType("bit");

                    b.Property<bool>("RegClients")
                        .HasColumnType("bit");

                    b.Property<bool>("RegFour")
                        .HasColumnType("bit");

                    b.Property<bool>("RetoursProdClient")
                        .HasColumnType("bit");

                    b.Property<bool>("RetoursProdFour")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StockAlerte")
                        .HasColumnType("bit");

                    b.Property<bool>("Stocks")
                        .HasColumnType("bit");

                    b.Property<bool>("Unites")
                        .HasColumnType("bit");

                    b.Property<bool>("Vc")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Identity.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Identity.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("SmartRestaurant.Domain.Identity.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRestaurant.Domain.Identity.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
