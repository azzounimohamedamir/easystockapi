// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartRestaurant.Infrastructure.Identity.Persistence;

namespace SmartRestaurant.Infrastructure.Identity.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20210711224225_updateSeedData_2")]
    partial class updateSeedData_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "88f0dec2-5364-4881-4817-1f2a135a8641",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "emec7115-422c-487d-65b0-58cfa8e66a94",
                            Name = "SupportAgent",
                            NormalizedName = "SUPPORTAGENT"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "emrc7115-422c-487d-75b0-58cfa8e66a94",
                            Name = "SalesMan",
                            NormalizedName = "SALESMAN"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "emtc7115-422c-487d-85b0-58cfa8e66a94",
                            Name = "Photograph",
                            NormalizedName = "PHOTOGRAPH"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "5719c2b8-22fd-4eee-9c21-4bfbd2ce18d2",
                            Name = "FoodBusinessAdministrator",
                            NormalizedName = "FOODBUSINESSADMINISTRATOR"
                        },
                        new
                        {
                            Id = "6",
                            ConcurrencyStamp = "emcc7115-422c-487d-95b0-58cfa8e66a94",
                            Name = "FoodBusinessManager",
                            NormalizedName = "FOODBUSINESSMANAGER"
                        },
                        new
                        {
                            Id = "7",
                            ConcurrencyStamp = "emcb7115-422c-487d-95c0-58cfa8m66a94",
                            Name = "FoodBusinessOwner",
                            NormalizedName = "FOODBUSINESSOWNER"
                        },
                        new
                        {
                            Id = "9",
                            ConcurrencyStamp = "encc7115-422c-487d-95b0-58cfa8e66a95",
                            Name = "Cashier",
                            NormalizedName = "CASHIER"
                        },
                        new
                        {
                            Id = "8",
                            ConcurrencyStamp = "elcc7115-422c-487d-95b0-58cfa8e66a96",
                            Name = "Chef",
                            NormalizedName = "CHEF"
                        },
                        new
                        {
                            Id = "10",
                            ConcurrencyStamp = "ekcc7115-422c-487d-95b0-58cfa8e66a97",
                            Name = "Waiter",
                            NormalizedName = "WAITER"
                        },
                        new
                        {
                            Id = "11",
                            ConcurrencyStamp = "edcc7115-422c-487d-95b0-58cfa8e66a98",
                            Name = "Diner",
                            NormalizedName = "DINER"
                        },
                        new
                        {
                            Id = "12",
                            ConcurrencyStamp = "educ7115-422c-487d-25b0-58cfa8e66a98",
                            Name = "Anounymous",
                            NormalizedName = "ANOUNYMOUS"
                        },
                        new
                        {
                            Id = "13",
                            ConcurrencyStamp = "edpc7115-422c-487d-15b0-58cfa8e66a98",
                            Name = "Organization",
                            NormalizedName = "ORGANIZATION"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3cbf3570-0d44-4673-8746-29b7cf568093",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "d466ef00-61f1-4e77-801a-b016f0f12323",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "d466ef00-61f1-4e77-801a-b516f0f12323",
                            RoleId = "10"
                        },
                        new
                        {
                            UserId = "3cbf3570-4444-4444-8746-29b7cf568093",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "44bf3570-0d44-4673-8746-29b7cf568088",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            RoleId = "11"
                        },
                        new
                        {
                            UserId = "6b14cd00-59f0-4422-bfce-07c080829987",
                            RoleId = "11"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SmartRestaurant.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "3cbf3570-0d44-4673-8746-29b7cf568093",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0c6c45c-4ae9-48aa-ba22-92bb39ed6660",
                            Email = "SuperAdmin@SmartRestaurant.io",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@SMARTRESTAURANT.IO",
                            NormalizedUserName = "SUPERADMIN@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEAzFpmzMtMiw0wHV6b0aUzFLF9Pw7B2u+DswRHttAU2nH22NHBsc/hSSvKUqmRWGZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de755128-7287-43d9-859c-c5a951587388",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin@SmartRestaurant.io",
                            IsActive = true
                        },
                        new
                        {
                            Id = "d466ef00-61f1-4e77-801a-b016f0f12323",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fbaece1e-509e-41e0-9ee0-12f4f4846400",
                            Email = "SupportAgent@SmartRestaurant.io",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPPORTAGENT@SMARTRESTAURANT.IO",
                            NormalizedUserName = "SUPPORTAGENT@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00d3d97f-3281-4331-8b0e-5733a51007af",
                            TwoFactorEnabled = false,
                            UserName = "SupportAgent@SmartRestaurant.io",
                            IsActive = true
                        },
                        new
                        {
                            Id = "d466ef00-61f1-4e77-801a-b516f0f12323",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c13d9fe3-185a-4511-9923-4b07915d1779",
                            Email = "Waiter@SmartRestaurant.io",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WAITER@SMARTRESTAURANT.IO",
                            NormalizedUserName = "WAITER@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "114e9481-c503-45db-a9d1-d1d26022252b",
                            TwoFactorEnabled = false,
                            UserName = "Waiter@SmartRestaurant.io",
                            IsActive = true
                        },
                        new
                        {
                            Id = "3cbf3570-4444-4444-8746-29b7cf568093",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e04246dc-7c76-47b1-a5e4-0db2dc0ad9a0",
                            Email = "FoodAdmin@SmartRestaurant.io",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FOODADMIN@SMARTRESTAURANT.IO",
                            NormalizedUserName = "FOODADMIN@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d10ff52d-e5e0-4020-8c68-b29402ab048c",
                            TwoFactorEnabled = false,
                            UserName = "FoodAdmin@SmartRestaurant.io",
                            IsActive = true
                        },
                        new
                        {
                            Id = "44bf3570-0d44-4673-8746-29b7cf568088",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c16201a-6fdb-49a6-8e96-c69d4cbd9c25",
                            Email = "McdonaldFoodAdmin@SmartRestaurant.io",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCDONALDFOODADMIN@SMARTRESTAURANT.IO",
                            NormalizedUserName = "MCDONALDFOODADMIN@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2YnCbwcY+aBvcZq2dTXfaPqZnSgNoXFKtyI0hIdVJI3tTBvln+3oc+p1Ijr/ckMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3c01bef-be3f-4580-b692-c15db3eb5f5d",
                            TwoFactorEnabled = false,
                            UserName = "McdonaldFoodAdmin@SmartRestaurant.io",
                            IsActive = true
                        },
                        new
                        {
                            Id = "a1997466-cedc-4850-b18d-0ac4f4102cff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f977933c-4505-42dc-b960-3a158321ed50",
                            Email = "TajMhalFoodBusinessManager@SmartRestaurant.io",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TAJMHALFOODBUSINESSMANAGER@SMARTRESTAURANT.IO",
                            NormalizedUserName = "TAJMHALFOODBUSINESSMANAGER@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsuHVzJHLS9jP+mo+zCHk22BZphE5WRR+o2C6Ct4Ektv8zW9DXj1nogD2OdNBjWPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20f5fd82-e649-4ac2-a16b-1c67053f5bc5",
                            TwoFactorEnabled = false,
                            UserName = "TajMhalFoodBusinessManager@SmartRestaurant.io",
                            IsActive = true
                        },
                        new
                        {
                            Id = "b2207466-ceda-4b50-b18d-0ac4f4102caa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68059690-929d-4bcb-97db-b31b19289707",
                            Email = "McdonaldFoodBusinessManager@SmartRestaurant.io",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MCDONALDFOODBUSINESSMANAGER@SMARTRESTAURANT.IO",
                            NormalizedUserName = "MCDONALDFOODBUSINESSMANAGER@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsuHVzJHLS9jP+mo+zCHk22BZphE5WRR+o2C6Ct4Ektv8zW9DXj1nogD2OdNBjWPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eeee385a-f4ae-4db7-acbc-1c6c90a6e7b3",
                            TwoFactorEnabled = false,
                            UserName = "McdonaldFoodBusinessManager@SmartRestaurant.io",
                            IsActive = true
                        },
                        new
                        {
                            Id = "5a84cd00-59f0-4b22-bfce-07c080829118",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "432c5541-334d-4fdf-9227-4b28290abd9e",
                            Email = "Diner_01@SmartRestaurant.io",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DINER_01@SMARTRESTAURANT.IO",
                            NormalizedUserName = "DINER_01@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEJFZbbuBIpvoyXKwrceuNsU4cXZ18LLAl8g7s48Pye4EAEXwA2hswtnLMhMS9Q7Cjw ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eadab07c-b9c7-4656-b4d3-ae2ccedb9a34",
                            TwoFactorEnabled = false,
                            UserName = "Diner_01@SmartRestaurant.io",
                            IsActive = true
                        },
                        new
                        {
                            Id = "6b14cd00-59f0-4422-bfce-07c080829987",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7bb134d-15fa-481d-b225-2a8ae9f8a191",
                            Email = "Diner_02@SmartRestaurant.io",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DINER_02@SMARTRESTAURANT.IO",
                            NormalizedUserName = "DINER_02@SMARTRESTAURANT.IO",
                            PasswordHash = "AQAAAAEAACcQAAAAEJFZbbuBIpvoyXKwrceuNsU4cXZ18LLAl8g7s48Pye4EAEXwA2hswtnLMhMS9Q7Cjw ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e56ca1d3-f30c-4f6b-884c-66ec4bc970b1",
                            TwoFactorEnabled = false,
                            UserName = "Diner_02@SmartRestaurant.io",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
